
version: '3'
# docker-compose up
# ref: http://postgrest.org/en/v6.0/install.html#docker
# ref: https://github.com/mattddowney/compose-postgrest/blob/master/docker-compose.yml
# Issue:  'password authentication failed for user "postgres"'
# Resolution:  then delete the database instance and rerun docker-compose up
# Trouble: Environment variables
# Solution: add .env in same folder as this yml.  include same name variables as those in environment section

services:
  #admin:
  #  container_name: admin
  #  image: wilfongjt/admin
  #  build:
  #    context: ./admin
  #    dockerfile: dockerfile-admin
  #  command: >
  #    bash -c "npm install && npm run dev"
  #  volumes:
  #    - ./admin:/usr/src
  #  ports:
  #    - "3200:3000"
  #web:
  #  container_name: web
  #  image: wilfongjt/web
  #  build:
  #    context: ./web
  #    dockerfile: dockerfile-web
  #  command: >
  #    bash -c "npm install && npm run dev"
  #  volumes:
  #    - ./web:/usr/src
  #  ports:
  #    - "3000:3000"

  #############
  # POSTGRES
  #########

  db:
    # env_file:
    #     - pg.env
    # create a .env to hold env vars ... see below
    build:
        context: ./db
        dockerfile: dockerfile-db
    ports:
      - "5433:5432"
    environment: # ${} are defined in .env found in docker-config.yml folder
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_JWT_SECRET=${POSTGRES_JWT_SECRET}
      - LB_GUEST_PASSWORD=mysecretclientpassword
      #- POSTGRES_SCHEMA=api_schema
      #- POSTGRES_PASSWORD=mysecretdatabasepassword

      #- POSTGRES_DB=exmpl_db
      #- POSTGRES_JWT_SECRET=PASSWORDmustBEATLEAST32CHARSLONG
      #- LB_EXAMPLE=example


    volumes:
      # anything in initdb directory is created in the database
      # see "How to extend this image" section at https://hub.docker.com/r/_/postgres/
      #      - "./exmpl-db/pg-database/db-scripts/compiled-scripts:/docker-entrypoint-initdb.d"

      - "./db/sql:/docker-entrypoint-initdb.d"

      # Uncomment this if you want to persist the data.

      #- "~/.data/exmpl_db/pgdata:/var/lib/postgresql/data"

    networks:
      - postgrest-backend

    restart: always

  ##########
  # POSTGRREST
  #####

  api:
    # http://postgrest.org/en/v7.0.0/tutorials/tut0.html
    #container_name: postgrest
    image: postgrest/postgrest:latest

    ports:
      - "3100:3000"

    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      # put
      - PGRST_DB_URI=postgres://authenticator:mysecretclientpassword@db:5432/exmpl_db
      - PGRST_DB_SCHEMA=api_schema
      - PGRST_DB_ANON_ROLE=api_guest
      - PGRST_JWT_SECRET=PASSWORDmustBEATLEAST32CHARSLONG
      #- PGRST_DB_URI=postgres://authenticator:${LB_GUEST_PASSWORD}@db:5432/${POSTGRES_DB}
      #- PGRST_DB_SCHEMA=${POSTGRES_SCHEMA}
      #- PGRST_DB_ANON_ROLE=api_guest
      #- PGRST_JWT_SECRET=${POSTGRES_JWT_SECRET}
    depends_on:
      - db

    links:
      - db:db

    networks:
      - postgrest-backend

    restart: always

networks:
  postgrest-backend:
    driver: bridge
