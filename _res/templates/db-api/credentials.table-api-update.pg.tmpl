\c [[db-prefix]]_db
--------------------------------------------
-- Update credential
-- logged in version
---------
-- [[api-name]](TEXT,int,TEXT,TEXT)
-- change while logged in

CREATE OR REPLACE FUNCTION
[[db-prefix]]_schema.[[api-name]](_token text, _id int, _email text, _password text) RETURNS TEXT
AS $$
    Declare rc TEXT;
    Declare _user jsonb;
  BEGIN

    rc := '{"result":-1}';
    rc := format('{"result":%s}', _id);
    if [[db-prefix]]_schema.is_valid_token(_token, '[[tbl-role]]') then
      rc := '{"result":-2}';

      select jsonb_set([[tbl-prefix]]_user, '{username}'::TEXT[], format('"%s"',_email)::jsonb, TRUE) as usr
        into _user
        from [[db-prefix]]_schema.[[api-table]]
        where [[tbl-prefix]]_id=_id and [[tbl-prefix]]_email=[[db-prefix]]_schema.get_username(_token);

      update [[db-prefix]]_schema.[[api-table]]
        set
          [[tbl-prefix]]_email=_email,
          [[tbl-prefix]]_password=_password,
          [[tbl-prefix]]_user=_user,
          [[tbl-prefix]]_updated=current_timestamp
        where [[tbl-prefix]]_id=_id
        and [[tbl-prefix]]_email=[[db-prefix]]_schema.get_username(_token);

      if FOUND then
        rc := '{"result":1}';
      end if;
    end if;

    RETURN rc;

  END;
$$ LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION
  [[db-prefix]]_schema.[[api-name]](
  TEXT, INT, TEXT, TEXT
  ) TO anonymous;

/*
select '##### Credential TESTS';
BEGIN;
SELECT plan(6);

--SELECT
-- credential(TEXT,TEXT)
-- credential(token, email)

select '###### Credential user not found';

SELECT is(
  [[db-prefix]]_schema.credential(
    sign(
      '{"username":"guest@[[db-prefix]].com","role":"guest"}'::json,current_setting('app.jwt_secret')
    ),
    'guest@[[db-prefix]].com'::TEXT,
    'a1A!aaaa'::TEXT
  ),
  '{"result":-1}'::TEXT,
  'credential noxample@[[db-prefix]].com not found SELECT')::TEXT;


-- UPDATE
-- usr_id value isnt predictable
-- update credential
-- credential(TEXT, int, TEXT,TEXT)

select '###### Credential User';

SELECT is(
  [[db-prefix]]_schema.credential(
    sign('{"username":"guest@[[db-prefix]].com","role":"guest"}'::json,current_setting('app.jwt_secret')),
    1,
    'guest@[[db-prefix]].com',
    'a1A!aaaa'
  ),
  '{"result":1}',
  'Credential guest@[[db-prefix]].com UPDATE'
);


SELECT * FROM finish();
ROLLBACK;



*/


/*
CREATE OR REPLACE FUNCTION
[[db-prefix]]_schema.[[api-name]](_token text, id int, email text, password text) RETURNS TEXT
AS $$
    Declare rc TEXT;
  BEGIN

    rc := '{"result":-1}';
    rc := format('{"result":%s}', id);
    if [[db-prefix]]_schema.is_valid_token(token, '[[tbl-role]]') then
      rc := '{"result":-2}';
      update [[db-prefix]]_schema.[[api-table]]
        set
          crd_email=email,
          crd_password=password,
          crd_updated=current_timestamp
        where crd_id=id
        and crd_email=[[db-prefix]]_schema.get_username(token);

      if FOUND then
        rc := '{"result":1}';
      end if;
    end if;

    RETURN rc;

  END;
$$ LANGUAGE plpgsql;
*/


