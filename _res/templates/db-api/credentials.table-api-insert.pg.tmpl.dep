\c [[db-prefix]]_db

-------------------------------
-- INSERT
-- aka new user
---------
-- [[api-name]](TEXT, TEXT)

CREATE OR REPLACE FUNCTION
[[db-prefix]]_schema.[[api-name]](username TEXT, password TEXT) RETURNS TEXT
AS $$

    Declare rc TEXT;
    Declare id int;
    Declare user jsonb;
    --Declare role TEXT;

  BEGIN

    rc := '{"result":-1}';
    --role := 'editor';
    --roles := format('{"%s":, ""roles": ["editor"]}',username)::jsonb;
    user := format('{"username": "%s", "roles": ["editor"]}','username')::jsonb;

    BEGIN

          INSERT INTO [[db-prefix]]_schema.[[tbl-name]]
            (crd_email, crd_password, crd_row)
            VALUES
            (username, password, user);

      rc := '{"result":1}';

    EXCEPTION WHEN unique_violation THEN

      rc := '{"result":2}';

    END;

    RETURN rc;

  END;
$$ LANGUAGE plpgsql;

-- ROLES

GRANT EXECUTE ON FUNCTION
  [[db-prefix]]_schema.[[api-name]](
  TEXT, TEXT
  ) TO anonymous;

/*
CREATE OR REPLACE FUNCTION
[[db-prefix]]_schema.[[api-name]](username TEXT, password TEXT) RETURNS TEXT
AS $$

    Declare rc TEXT;
    Declare id int;
    Declare roles jsonb;
    --Declare role TEXT;

  BEGIN

    rc := '{"result":-1}';
    --role := 'editor';
    roles := format('{"%s":, ""roles": ["editor"]}',username)::jsonb;
    BEGIN

          INSERT INTO [[db-prefix]]_schema.[[tbl-name]]
            (crd_email, crd_password, crd_roles)
            VALUES
            (username, password, roles);

      rc := '{"result":1}';

    EXCEPTION WHEN unique_violation THEN

      rc := '{"result":2}';

    END;

    RETURN rc;

  END;
$$ LANGUAGE plpgsql;

*/



