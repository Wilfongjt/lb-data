\c [[db-prefix]]_db

CREATE OR REPLACE FUNCTION
reg_schema.credential(_token TEXT, _json JSONB) RETURNS JSONB
AS $$
    Declare rc jsonb;
    Declare _cur_row JSONB;

    Declare _guest JSONB;
    Declare _registrant JSONB;
    -- declare-upsert
    [[declare-upsert]]
  BEGIN
    _guest := current_setting('app.lb_register_guest')::jsonb;
    _registrant :=  current_setting('app.lb_register_registrant')::jsonb;

    -- figure out which token: app-token or user-token

    if [[db-prefix]]_schema.is_valid_token(_token, _registrant ->> 'role') then
		rc := '{"result":"2"}'::JSONB;
	elsif [[db-prefix]]_schema.is_valid_token(_token, _guest ->> 'role') then
		rc := '{"result":"1"}'::JSONB;
    else
        return '{"result": "0"}'::JSONB;
    end if;

    -- update or insert
    if
    	_json ? 'id'
    then
    	--update
    	rc := '{"result":"-2"}'::JSONB;

		-- get current json object
		select [[tbl-prefix]]_row as _usr
		  into _cur_row
		  from [[db-prefix]]_schema.[[api-table]]
		  where
		    [[where-clause]]

        rc := '{"result":"-2.1"}'::JSONB;

		-- update existing json object with input values

        BEGIN
            -- sync-json-values to table values
    	    [[sync-json-values]]

            -- update_combos_format
            [[update_combos_format]]

        EXCEPTION

		    WHEN check_violation then
		        rc := '{"result":"-2.2"}'::JSONB;
		    WHEN others then
		        rc := '{"result":"-2.2"}'::JSONB;
        END;
		if not FOUND then
		  return format('{"result":"-2.2"}')::JSONB;
		end if;

	    rc := '{"result":"2"}'::JSONB;
    else

    	BEGIN

    	    -- check required attributes
    	    [[required_input_attributes]]

    	    -- set defaults just in case
    	    [[set-defaults]]

            -- sync json values to table values
    	    [[sync-json-values]]

            -- validate
            if length(_password) < 8 then
                return '{"result":"-1.4"}'::JSONB;
            end if;

            -- remove pw before inserting
    	    _row = _json - 'password';

			rc := '{"result":"1"}'::JSONB;

			--insert-statement
			INSERT
              INTO [[db-prefix]]_schema.[[tbl-name]]
              (
                [[insert-columns]]
              ) VALUES (
                [[insert-values]]
              );
		EXCEPTION
		    WHEN unique_violation THEN
		        rc := '{"result":"-1.1"}'::JSONB;
		    WHEN check_violation then
		        rc := '{"result":"-1.2"}'::JSONB;
		    WHEN others then
		        rc := '{"result":"-1.3"}'::JSONB;
		END;
    end if;
    RETURN rc;
  END;

$$ LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION
  [[db-prefix]]_schema.[[api-name]](
  TEXT, JSONB
  ) TO anonymous;



