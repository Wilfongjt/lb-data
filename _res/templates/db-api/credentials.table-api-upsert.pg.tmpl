\c [[db-prefix]]_db


CREATE OR REPLACE FUNCTION
reg_schema.credential(_json JSONB) RETURNS JSONB
AS $$
DECLARE _token TEXT;
DECLARE _jwt TEXT;
DECLARE _guest jsonb;
BEGIN
    _guest := current_setting('app.lb_register_guest')::JSONB-'password';
	_jwt := current_setting('app.lb_register_jwt')::JSONB ->> 'password';
	_token := sign(_guest::JSON, _jwt) ;
	return reg_schema.credential(_token, _json);
END;
$$ LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION
  [[db-prefix]]_schema.[[api-name]](
  JSONB
  ) TO anonymous;

--------------------------------------------
-- Upsert credential
---------
-- [[api-name]](TEXT,int,JSONB)

-- update username
-- select jsonb_set('{"username":"b@a.com", "email": "b@a.com", "roles":[]}'::JSONB,'{username}'::TEXT[], '{"username": "a@a.com"}'::JSONB -> 'username' );

-- update email
-- select jsonb_set('{"username":"b@a.com", "email": "b@a.com", "roles":[]}'::JSONB,'{email}'::TEXT[], '{"email": "a@a.com"}'::JSONB -> 'email' );

-- update password
-- select jsonb_set('{"username":"b@a.com", "email": "b@a.com", "roles":[]}'::JSONB,'{email}'::TEXT[], '{"password": "a1A!aaaa"}'::JSONB -> 'password' );

-- add role, SPECIAL CASE
-- select jsonb_insert('{"username":"b@a.com", "email": "b@a.com", "roles":[]}'::JSONB,'{roles, 999}'::TEXT[], '{"role": "guest"}'::JSONB -> 'role' );

-- remove role
--select jsonb_set(
--	'{"username":"b@a.com", "email": "b@a.com", "roles":["guest","reg"]}'::JSONB,
--	'{roles}'::TEXT[],
--	('{"roles":["guest","reg"]}'::jsonb->'roles') - 'guest'
--);
-- add extra attributes
--select jsonb_set(
--	'{"username":"b@a.com", "email": "b@a.com", "roles":["guest","reg"]}'::JSONB,
--	'{roles}'::TEXT[],
--	('{"roles":["guest","reg"]}'::jsonb->'roles') - 'guest'
--);
CREATE OR REPLACE FUNCTION
reg_schema.credential(_token TEXT, _json JSONB) RETURNS JSONB
AS $$
	-- insert {username:"AA@AA.AAA", password:""}
    -- update {id:N, username:"AA@AA.AAA", password: ""}

    Declare rc jsonb;
    Declare _cur_row JSONB;

    Declare _guest JSONB;
    Declare _registrant JSONB;
    -- declare-upsert
    [[declare-upsert]]
  BEGIN
    _guest := current_setting('app.lb_register_guest')::jsonb;
    _registrant :=  current_setting('app.lb_register_registrant')::jsonb;
    -- insert and update tokens are different
    -- insert tokens are an application token
    -- update tokens are a user token
    -- figure out which token: app-token or user-token

    if [[db-prefix]]_schema.is_valid_token(_token, _registrant ->> 'role') then
		rc := '{"result":"2"}'::JSONB;
	elsif [[db-prefix]]_schema.is_valid_token(_token, _guest ->> 'role') then
		rc := '{"result":"1"}'::JSONB;
    else
        return '{"result": "0"}'::JSONB;
    end if;

    -- required _json insert attributes

    -- update or insert
    if
    	_json ? 'id'
    then
    	--update
    	rc := '{"result":"-2"}'::JSONB;

		-- get current json object
		select [[tbl-prefix]]_row as _usr
		  into _cur_row
		  from [[db-prefix]]_schema.[[api-table]]
		  where
		    [[where-clause]]

        rc := '{"result":"-2.1"}'::JSONB;

		-- update existing json object with input values
		 /*
		if _cur_row ? 'username' and _json ? 'username' then
		   _cur_row := jsonb_set(_cur_row, '{username}'::TEXT[], format('"%s"',_username)::jsonb, TRUE) ;
        end if;

        if _json ? 'username' then
            _username = _json ->> 'username';
        end if;

        _row = _json - 'password';
        */

        BEGIN
            -- sync-json-values to table values
    	    [[sync-json-values]]
            -- update
            ---- expect id in _json
            ---- remove password from _json before updating
            ---- merge roles when needed
            -- update the record
            -- update_combos_format
            [[update_combos_format]]

        EXCEPTION

		    WHEN check_violation then
		        rc := '{"result":"-2.2"}'::JSONB;
		    WHEN others then
		        rc := '{"result":"-2.2"}'::JSONB;
        END;
		if not FOUND then
		  return format('{"result":"-2.2"}')::JSONB;
		end if;

	    rc := '{"result":"2"}'::JSONB;
    else
    	-- insert
    	-- username
    	-- password
    	-- roles start with registrant
    	-- add user data
    	BEGIN

    	    -- check required attributes
    	    [[required_input_attributes]]

    	    -- set defaults just in case
    	    [[set-defaults]]

            -- sync json values to table values
    	    [[sync-json-values]]

            -- validate
            if length(_password) < 8 then
                return '{"result":"-1.4"}'::JSONB;
            end if;

            -- remove pw before inserting
    	    _row = _json - 'password';

			rc := '{"result":"1"}'::JSONB;

			--insert-statement
			INSERT
              INTO [[db-prefix]]_schema.[[tbl-name]]
              (
                [[insert-columns]]
              ) VALUES (
                [[insert-values]]
              );
		EXCEPTION
		    WHEN unique_violation THEN
		        rc := '{"result":"-1.1"}'::JSONB;
		    WHEN check_violation then
		        rc := '{"result":"-1.2"}'::JSONB;
		    WHEN others then
		        rc := '{"result":"-1.3"}'::JSONB;
		END;
    end if;
    RETURN rc;
  END;

$$ LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION
  [[db-prefix]]_schema.[[api-name]](
  TEXT, JSONB
  ) TO anonymous;



