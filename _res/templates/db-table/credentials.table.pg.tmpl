---- SET DB
\c [[db-prefix]]_db
/*
-- Create Table
-- c: email, password, access, active
-- Alter access default  {roles:[]}
-- Create Index for primary key
-- Create Index for unique email
-- Create Insert Trigger, intercept new password and encrypt
-- Create Update Trigger, intercept new password and encrypt, set update to current time
*/
create table if not exists
[[db-prefix]]_schema.[[tbl-name]] (
  [[fields]]
);
CREATE UNIQUE INDEX IF NOT EXISTS [[tbl-name]]_[[tbl-prefix]]_id_pkey ON [[db-prefix]]_schema.[[tbl-name]]([[tbl-prefix]]_id int4_ops);
CREATE UNIQUE INDEX IF NOT EXISTS index_[[tbl-name]]_on_[[tbl-prefix]]_email ON [[db-prefix]]_schema.[[tbl-name]]([[tbl-prefix]]_email text_ops);

-- add default value
ALTER TABLE [[db-prefix]]_schema.[[tbl-name]] ALTER COLUMN [[tbl-prefix]]_user SET DEFAULT '{"username": "", "roles":[]}'::JSONB;

-- insert update trigger

CREATE OR REPLACE FUNCTION [[tbl-prefix]]_ins_upd_trigger_func() RETURNS trigger
AS $$
BEGIN
   -- encrypt password
   IF (TG_OP = 'INSERT') THEN
       NEW.[[tbl-prefix]]_password := crypt(NEW.[[tbl-prefix]]_password, gen_salt('bf', 8));

   ELSEIF (TG_OP = 'UPDATE') THEN
       NEW.[[tbl-prefix]]_password := crypt(NEW.[[tbl-prefix]]_password, gen_salt('bf', 8));
       NEW.[[tbl-prefix]]_updated := CURRENT_TIMESTAMP;

   END IF;
   RETURN NEW;
END; $$ LANGUAGE plpgsql;

-- set insert trigger
CREATE TRIGGER [[tbl-prefix]]_ins_upd_trigger
 BEFORE INSERT OR UPDATE ON [[db-prefix]]_schema.[[tbl-name]]
 FOR EACH ROW
 EXECUTE PROCEDURE [[tbl-prefix]]_ins_upd_trigger_func();

-- insert trigger




/*
CREATE OR REPLACE FUNCTION [[tbl-prefix]]_ins_trigger_func() RETURNS trigger
AS $$
BEGIN
   -- encrypt password
   NEW.[[tbl-prefix]]_password := crypt(NEW.[[tbl-prefix]]_password, gen_salt('bf', 8));
   NEW.[[tbl-prefix]]_active := false;
   RETURN NEW;
END; $$ LANGUAGE plpgsql;

-- set insert trigger
CREATE TRIGGER [[tbl-prefix]]_ins_trigger
 BEFORE INSERT ON [[db-prefix]]_schema.[[tbl-name]]
 FOR EACH ROW
 EXECUTE PROCEDURE [[tbl-prefix]]_ins_trigger_func();

 -- Create UPDATE trigger

CREATE OR REPLACE FUNCTION [[tbl-prefix]]_upd_trigger_func() RETURNS trigger
AS $$
BEGIN
   -- encrypt password
   NEW.[[tbl-prefix]]_password := crypt(NEW.[[tbl-prefix]]_password, gen_salt('bf', 8));
   NEW.[[tbl-prefix]]_updated := CURRENT_TIMESTAMP;
   NEW.[[tbl-prefix]]_active := false;
   RETURN NEW;
END; $$ LANGUAGE plpgsql;

-- set UPDATE trigger

CREATE TRIGGER [[tbl-prefix]]_upd_trigger
 BEFORE UPDATE ON [[db-prefix]]_schema.[[tbl-name]]
 FOR EACH ROW
 EXECUTE PROCEDURE [[tbl-prefix]]_upd_trigger_func();
 */